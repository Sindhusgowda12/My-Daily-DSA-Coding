class Solution {
    // Helper method for DFS
    public void dfs(char[][] grid, int i, int j) {
        // Check for out-of-bounds or water ('0')
        if (i < 0 || j < 0 || i >= grid.length || j >= grid[0].length || 
            grid[i][j] == '0') {
            return;
        }

        // Mark the land as visited by setting it to '0'
        grid[i][j] = '0';

        // Visit all 4 connected directions
        dfs(grid, i + 1, j); // Down
        dfs(grid, i - 1, j); // Up
        dfs(grid, i, j + 1); // Right
        dfs(grid, i, j - 1); // Left
    }

    public int numIslands(char[][] grid) {
        if (grid == null || grid.length == 0)
            return 0;

        int count = 0;

        // Traverse the entire grid
        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[0].length; j++) {
                // When land is found
                if (grid[i][j] == '1') {
                    count++;
                    dfs(grid, i, j); // Mark entire island
                }
            }
        }

        return count;
    }
}
